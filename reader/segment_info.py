import re
import collections
from typing import Union, Dict, List, Iterable, Tuple

class SegmentInfo:
    """
    A dataclass-like object to store the metadata information belonging to
    a segment in a 3D-Slicer generated segmentation.
    """
    slicer_to_internal_alias = {
        'Color' : 'color',
        'ColorAutoGenerated' : 'color_autogenerated',
        'Extent' : 'extent',
        'ID' : 'ID',
        'LabelValue' : 'label_value',
        'Layer' : 'layer',
        'Name' : 'name',
        'NameAutoGenerated' : 'name_autogenerated',
        'Tags' : 'tags'
    }
    # reversed mapping
    internal_to_slicer_alias =  {
        value : key for key, value in slicer_to_internal_alias.items()
    }
    # fields for the __repr__ dunder method
    repr_field_names = ['name', 'label_value', 'color', 'ID']

    def __init__(self, name, color, ID, label_value,
                 extent, color_autogenerated, layer,
                 name_autogenerated, tags) -> None:
        
        self.name = name
        self.color = color
        self.ID = ID
        self.label_value = label_value
        self.extent = extent
        self.color_autogenerated = color_autogenerated
        self.layer = layer
        self.name_autogenerated = name_autogenerated
        self.tags = tags

    
    def __repr__(self) -> str:
        # string repr sequence of selected attributes
        attr_kv_seq = ', '.join(
            ('{}={}'.format(name, getattr(self, name))
            for name in self.repr_field_names)
        )
        repr_str = '{}({})'.format(
            self.__class__.__name__,
            attr_kv_seq
        )
        return repr_str

    
    def __eq__(self, other) -> bool:
        """Dunder comparison method."""
        # TODO: We got to think about the case: When do SegmentInfo
        # objects represent the same thing? When label values are identical?
        # Or when additional fields are equal?
        if not isinstance(other, SegmentInfo):
            return NotImplemented
        else:
            return self.ID == other.ID


    def to_dict(self, keystyle='internal', prefix='') -> Dict:
        """
        Turn/devolve the object into a dictionary (Python primitive).

        Parameters
        ----------

        keystyle : str, optional
            Determines the styling of the keys in the returned dict.
            May be 'internal' (yielding pretty snake_case keys)
            or 'slicer' (yielding ugly CamelCase keys)
            Defaults to 'internal'
        
        prefix : str, optional
            Optional prefix prepended to the keys. Only active for
            'slicer' keystyle. May be used to prepend the Slicer-
            internal 'SegmentN_' to the keys.
            Defaults to '' (empty string)
        
        Returns
        -------

        obj_dict : dict
            The SegmentInfo instance as a Python-primitive
            dictionary
        """
        if keystyle not in ('internal', 'slicer'):
            msg = f'Unrecognized keystyle: {keystyle}'
            raise ValueError(msg)
        
        if keystyle == 'internal':
            obj_dict = {
                key : getattr(self, key)
                for key in self.internal_to_slicer_alias.keys()
            }
        else:
            obj_dict = {
                ''.join((prefix, key)) : getattr(self, value)
                for key, value in self.slicer_to_internal_alias.items()
            }
            # for full symmetry we have to back-convert the color float tuple
            # into a space-separated string
            obj_dict[''.join((prefix, 'Color'))] = ' '.join(str(val) for val in self.color)
        return obj_dict


    @property
    def color(self) -> Tuple[float]:
        return self._color
    

    @color.setter
    def color(self, c: Iterable) -> None:
        """
        Set the segment color. Must be a RGB tuple (r, g, b)
        The new color specification may be a space-separated string
        whose parts are required to be float-castable.
        Otherwise a tree tuple is required.
        """
        if isinstance(c, str):
            # try RGB interpretation from string
            c = c.split(' ')
        
        c_checked = []
        for val in c:
            val = float(val)
            assert val >= 0 and val <= 1, 'RGB value must be in closed interval [0, 1]'
            c_checked.append(val)
        
        self._color = tuple(c_checked)


    @property
    def label_value(self) -> int:
        return self._label_value
    

    @label_value.setter
    def label_value(self, new_label_value: int) -> None:
        """
        Managed attribute setter for label_value, which
        is expected to be an integer.
        """
        if not isinstance(new_label_value, int):
            new_label_value = int(new_label_value)
        
        self._label_value = new_label_value



    @classmethod
    def from_header(cls,
                    header_data: collections.OrderedDict) -> List['SegmentInfo']:
        """
        Directly create the exhaustive list of SegmentInfo instances from
        the header data
        """
        segment_prefix = 'Segment'
        pattern = re.compile(pattern=segment_prefix + '\d')
        segment_attrs = {}
        # exhaustive search over the full header dictionary
        for key, value in header_data.items():
            # only concern ourselves segment key - value pairs
            if pattern.match(key):
                # 3D Slicer key naming scheme: (SegmentN_attrname, attrval)
                segment_id, attr_alias = key.split('_')
                # translate the 3D Slicer attr alias to our preferred internal name
                attr_name = cls.slicer_to_internal_alias[attr_alias]
                # insert into the dictionary
                try:
                    segment_attrs[segment_id]
                except KeyError:
                    # not encountered this segment up until now
                    # make a new subdictionary
                    segment_attrs[segment_id] = {}
                
                segment_attrs[segment_id][attr_name] = value
        
        return [cls(**kwargs) for kwargs in segment_attrs.values()]
